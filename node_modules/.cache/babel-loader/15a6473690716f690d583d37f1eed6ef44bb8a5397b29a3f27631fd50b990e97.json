{"ast":null,"code":"var _s = $RefreshSig$();\nimport React from 'react';\nimport { API_CONFIG, buildApiUrl, handleApiError } from '../config/api';\n\n// Función helper para hacer requests\nconst apiRequest = async (endpoint, options = {}) => {\n  const url = buildApiUrl(endpoint);\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers\n    },\n    ...options\n  };\n  try {\n    const response = await fetch(url, config);\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || 'Error en la petición');\n    }\n    return data;\n  } catch (error) {\n    console.error('API Error:', error);\n    throw error;\n  }\n};\n\n// Servicios de la API\nexport const apiService = {\n  // Obtener licitaciones con filtros\n  getLicitaciones: async (params = {}) => {\n    const queryParams = new URLSearchParams();\n    if (params.region) queryParams.append('region', params.region);\n    if (params.page) queryParams.append('page', params.page);\n    if (params.limit) queryParams.append('limit', params.limit);\n    if (params.estado) queryParams.append('estado', params.estado);\n    if (params.fechaInicio) queryParams.append('fechaInicio', params.fechaInicio);\n    if (params.fechaFin) queryParams.append('fechaFin', params.fechaFin);\n    const queryString = queryParams.toString();\n    const endpoint = `${API_CONFIG.ENDPOINTS.LICITACIONES}${queryString ? `?${queryString}` : ''}`;\n    return apiRequest(endpoint);\n  },\n  // Obtener detalles de una licitación específica (buscar en la lista completa)\n  getLicitacionDetail: async id => {\n    // Obtener todas las licitaciones y buscar por ID\n    const response = await apiRequest(API_CONFIG.ENDPOINTS.LICITACIONES);\n    if (response.success && response.data) {\n      const licitacion = response.data.find(lic => lic.id === id);\n      if (licitacion) {\n        return {\n          success: true,\n          data: licitacion\n        };\n      } else {\n        throw new Error('Licitación no encontrada');\n      }\n    } else {\n      throw new Error('Error al obtener licitaciones');\n    }\n  },\n  // Obtener estadísticas generales usando /historial\n  getEstadisticas: async () => {\n    try {\n      // Intentar con /historial que ya tienes configurado\n      return await apiRequest(API_CONFIG.ENDPOINTS.HISTORIAL);\n    } catch (error) {\n      console.log('Error obteniendo estadísticas:', error);\n      // Si falla, devolver estadísticas básicas calculadas desde /licitaciones\n      const licitacionesResponse = await apiRequest(API_CONFIG.ENDPOINTS.LICITACIONES);\n      if (licitacionesResponse.success && licitacionesResponse.data) {\n        const licitaciones = licitacionesResponse.data;\n\n        // Calcular estadísticas básicas\n        const estadisticas = {\n          totalLicitaciones: licitaciones.length,\n          licitacionesAbiertas: licitaciones.filter(l => l.estado && l.estado.toLowerCase().includes('abierta')).length,\n          organismos: new Set(licitaciones.map(l => l.responsable).filter(Boolean)).size,\n          montoTotal: 0,\n          fechaUltimaActualizacion: new Date().toISOString(),\n          porRegion: {},\n          porEstado: {}\n        };\n\n        // Calcular estadísticas por región y estado\n        licitaciones.forEach(lic => {\n          if (lic.region) {\n            estadisticas.porRegion[lic.region] = (estadisticas.porRegion[lic.region] || 0) + 1;\n          }\n          if (lic.estado) {\n            estadisticas.porEstado[lic.estado] = (estadisticas.porEstado[lic.estado] || 0) + 1;\n          }\n        });\n        return {\n          success: true,\n          data: estadisticas\n        };\n      } else {\n        throw new Error('No se pudieron obtener estadísticas');\n      }\n    }\n  }\n};\n\n// Hook personalizado para manejar estados de carga y error\nexport const useApiState = () => {\n  _s();\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState(null);\n  const executeRequest = async apiCall => {\n    setLoading(true);\n    setError(null);\n    try {\n      const result = await apiCall();\n      return result;\n    } catch (err) {\n      const errorMessage = handleApiError(err);\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    loading,\n    error,\n    executeRequest\n  };\n};\n_s(useApiState, \"Iz3ozxQ+abMaAIcGIvU8cKUcBeo=\");","map":{"version":3,"names":["React","API_CONFIG","buildApiUrl","handleApiError","apiRequest","endpoint","options","url","config","headers","response","fetch","data","json","ok","Error","error","console","apiService","getLicitaciones","params","queryParams","URLSearchParams","region","append","page","limit","estado","fechaInicio","fechaFin","queryString","toString","ENDPOINTS","LICITACIONES","getLicitacionDetail","id","success","licitacion","find","lic","getEstadisticas","HISTORIAL","log","licitacionesResponse","licitaciones","estadisticas","totalLicitaciones","length","licitacionesAbiertas","filter","l","toLowerCase","includes","organismos","Set","map","responsable","Boolean","size","montoTotal","fechaUltimaActualizacion","Date","toISOString","porRegion","porEstado","forEach","useApiState","_s","loading","setLoading","useState","setError","executeRequest","apiCall","result","err","errorMessage"],"sources":["C:/Users/jp.maldonado/Desktop/Universidad/scraper2/Frontend/src/services/api.js"],"sourcesContent":["import React from 'react';\r\nimport { API_CONFIG, buildApiUrl, handleApiError } from '../config/api';\r\n\r\n// Función helper para hacer requests\r\nconst apiRequest = async (endpoint, options = {}) => {\r\n  const url = buildApiUrl(endpoint);\r\n  \r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...options.headers,\r\n    },\r\n    ...options,\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(url, config);\r\n    const data = await response.json();\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(data.error || 'Error en la petición');\r\n    }\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error('API Error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Servicios de la API\r\nexport const apiService = {\r\n  // Obtener licitaciones con filtros\r\n  getLicitaciones: async (params = {}) => {\r\n    const queryParams = new URLSearchParams();\r\n    \r\n    if (params.region) queryParams.append('region', params.region);\r\n    if (params.page) queryParams.append('page', params.page);\r\n    if (params.limit) queryParams.append('limit', params.limit);\r\n    if (params.estado) queryParams.append('estado', params.estado);\r\n    if (params.fechaInicio) queryParams.append('fechaInicio', params.fechaInicio);\r\n    if (params.fechaFin) queryParams.append('fechaFin', params.fechaFin);\r\n    \r\n    const queryString = queryParams.toString();\r\n    const endpoint = `${API_CONFIG.ENDPOINTS.LICITACIONES}${queryString ? `?${queryString}` : ''}`;\r\n    \r\n    return apiRequest(endpoint);\r\n  },\r\n\r\n  // Obtener detalles de una licitación específica (buscar en la lista completa)\r\n  getLicitacionDetail: async (id) => {\r\n    // Obtener todas las licitaciones y buscar por ID\r\n    const response = await apiRequest(API_CONFIG.ENDPOINTS.LICITACIONES);\r\n    \r\n    if (response.success && response.data) {\r\n      const licitacion = response.data.find(lic => lic.id === id);\r\n      if (licitacion) {\r\n        return {\r\n          success: true,\r\n          data: licitacion\r\n        };\r\n      } else {\r\n        throw new Error('Licitación no encontrada');\r\n      }\r\n    } else {\r\n      throw new Error('Error al obtener licitaciones');\r\n    }\r\n  },\r\n\r\n  // Obtener estadísticas generales usando /historial\r\n  getEstadisticas: async () => {\r\n    try {\r\n      // Intentar con /historial que ya tienes configurado\r\n      return await apiRequest(API_CONFIG.ENDPOINTS.HISTORIAL);\r\n    } catch (error) {\r\n      console.log('Error obteniendo estadísticas:', error);\r\n      // Si falla, devolver estadísticas básicas calculadas desde /licitaciones\r\n      const licitacionesResponse = await apiRequest(API_CONFIG.ENDPOINTS.LICITACIONES);\r\n      \r\n      if (licitacionesResponse.success && licitacionesResponse.data) {\r\n        const licitaciones = licitacionesResponse.data;\r\n        \r\n        // Calcular estadísticas básicas\r\n        const estadisticas = {\r\n          totalLicitaciones: licitaciones.length,\r\n          licitacionesAbiertas: licitaciones.filter(l => \r\n            l.estado && l.estado.toLowerCase().includes('abierta')\r\n          ).length,\r\n          organismos: new Set(licitaciones.map(l => l.responsable).filter(Boolean)).size,\r\n          montoTotal: 0,\r\n          fechaUltimaActualizacion: new Date().toISOString(),\r\n          porRegion: {},\r\n          porEstado: {}\r\n        };\r\n        \r\n        // Calcular estadísticas por región y estado\r\n        licitaciones.forEach(lic => {\r\n          if (lic.region) {\r\n            estadisticas.porRegion[lic.region] = (estadisticas.porRegion[lic.region] || 0) + 1;\r\n          }\r\n          if (lic.estado) {\r\n            estadisticas.porEstado[lic.estado] = (estadisticas.porEstado[lic.estado] || 0) + 1;\r\n          }\r\n        });\r\n        \r\n        return {\r\n          success: true,\r\n          data: estadisticas\r\n        };\r\n      } else {\r\n        throw new Error('No se pudieron obtener estadísticas');\r\n      }\r\n    }\r\n  },\r\n};\r\n\r\n// Hook personalizado para manejar estados de carga y error\r\nexport const useApiState = () => {\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [error, setError] = React.useState(null);\r\n\r\n  const executeRequest = async (apiCall) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const result = await apiCall();\r\n      return result;\r\n    } catch (err) {\r\n      const errorMessage = handleApiError(err);\r\n      setError(errorMessage);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return { loading, error, executeRequest };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}