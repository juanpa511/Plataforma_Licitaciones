{"ast":null,"code":"var _s = $RefreshSig$();\nimport React from 'react';\n\n// Configuración base de la API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://your-api-gateway-url.execute-api.us-east-1.amazonaws.com/dev';\n\n// Función helper para hacer requests\nconst apiRequest = async (endpoint, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers\n    },\n    ...options\n  };\n  try {\n    const response = await fetch(url, config);\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || 'Error en la petición');\n    }\n    return data;\n  } catch (error) {\n    console.error('API Error:', error);\n    throw error;\n  }\n};\n\n// Servicios de la API\nexport const apiService = {\n  // Obtener licitaciones con filtros\n  getLicitaciones: async (params = {}) => {\n    const queryParams = new URLSearchParams();\n    if (params.region) queryParams.append('region', params.region);\n    if (params.page) queryParams.append('page', params.page);\n    if (params.limit) queryParams.append('limit', params.limit);\n    if (params.estado) queryParams.append('estado', params.estado);\n    if (params.fechaInicio) queryParams.append('fechaInicio', params.fechaInicio);\n    if (params.fechaFin) queryParams.append('fechaFin', params.fechaFin);\n    const queryString = queryParams.toString();\n    const endpoint = `/licitaciones${queryString ? `?${queryString}` : ''}`;\n    return apiRequest(endpoint);\n  },\n  // Obtener detalles de una licitación específica\n  getLicitacionDetail: async id => {\n    return apiRequest(`/licitaciones/${id}`);\n  },\n  // Obtener estadísticas generales\n  getEstadisticas: async () => {\n    return apiRequest('/estadisticas');\n  }\n};\n\n// Hook personalizado para manejar estados de carga y error\nexport const useApiState = () => {\n  _s();\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState(null);\n  const executeRequest = async apiCall => {\n    setLoading(true);\n    setError(null);\n    try {\n      const result = await apiCall();\n      return result;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    loading,\n    error,\n    executeRequest\n  };\n};\n_s(useApiState, \"Iz3ozxQ+abMaAIcGIvU8cKUcBeo=\");","map":{"version":3,"names":["React","API_BASE_URL","process","env","REACT_APP_API_URL","apiRequest","endpoint","options","url","config","headers","response","fetch","data","json","ok","Error","error","console","apiService","getLicitaciones","params","queryParams","URLSearchParams","region","append","page","limit","estado","fechaInicio","fechaFin","queryString","toString","getLicitacionDetail","id","getEstadisticas","useApiState","_s","loading","setLoading","useState","setError","executeRequest","apiCall","result","err","message"],"sources":["C:/Users/jp.maldonado/Desktop/Universidad/scraper2/Frontend/src/services/api.js"],"sourcesContent":["import React from 'react';\r\n\r\n// Configuración base de la API\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://your-api-gateway-url.execute-api.us-east-1.amazonaws.com/dev';\r\n\r\n// Función helper para hacer requests\r\nconst apiRequest = async (endpoint, options = {}) => {\r\n  const url = `${API_BASE_URL}${endpoint}`;\r\n  \r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...options.headers,\r\n    },\r\n    ...options,\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(url, config);\r\n    const data = await response.json();\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(data.error || 'Error en la petición');\r\n    }\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error('API Error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Servicios de la API\r\nexport const apiService = {\r\n  // Obtener licitaciones con filtros\r\n  getLicitaciones: async (params = {}) => {\r\n    const queryParams = new URLSearchParams();\r\n    \r\n    if (params.region) queryParams.append('region', params.region);\r\n    if (params.page) queryParams.append('page', params.page);\r\n    if (params.limit) queryParams.append('limit', params.limit);\r\n    if (params.estado) queryParams.append('estado', params.estado);\r\n    if (params.fechaInicio) queryParams.append('fechaInicio', params.fechaInicio);\r\n    if (params.fechaFin) queryParams.append('fechaFin', params.fechaFin);\r\n    \r\n    const queryString = queryParams.toString();\r\n    const endpoint = `/licitaciones${queryString ? `?${queryString}` : ''}`;\r\n    \r\n    return apiRequest(endpoint);\r\n  },\r\n\r\n  // Obtener detalles de una licitación específica\r\n  getLicitacionDetail: async (id) => {\r\n    return apiRequest(`/licitaciones/${id}`);\r\n  },\r\n\r\n  // Obtener estadísticas generales\r\n  getEstadisticas: async () => {\r\n    return apiRequest('/estadisticas');\r\n  },\r\n};\r\n\r\n// Hook personalizado para manejar estados de carga y error\r\nexport const useApiState = () => {\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [error, setError] = React.useState(null);\r\n\r\n  const executeRequest = async (apiCall) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const result = await apiCall();\r\n      return result;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return { loading, error, executeRequest };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}